const Anthropic = require('@anthropic-ai/sdk');
const axios = require('axios');

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_USERNAME = process.env.GITHUB_USERNAME;
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const SECRET_CODE = process.env.SECRET_CODE;

const anthropic = new Anthropic({
  apiKey: ANTHROPIC_API_KEY,
  baseURL: 'https://aipipe.iitm.ac.in/anthropic/v1'
});

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

function decodeDataURI(dataUri) {
  const matches = dataUri.match(/^data:([^;]+);base64,(.+)$/);
  if (!matches) return null;
  
  const mimeType = matches[1];
  const base64Data = matches[2];
  const content = Buffer.from(base64Data, 'base64').toString('utf-8');
  
  return { mimeType, content };
}

async function generateCode(brief, checks, attachments) {
  let attachmentDetails = '';
  
  if (attachments && attachments.length > 0) {
    attachmentDetails = '\n\nATTACHMENTS (decode and use these):\n';
    
    for (const att of attachments) {
      if (att.url.startsWith('data:')) {
        const decoded = decodeDataURI(att.url);
        if (decoded) {
          attachmentDetails += `\nFile: ${att.name}\nContent:\n${decoded.content}\n`;
        }
      } else {
        attachmentDetails += `\nFile: ${att.name}\nURL: ${att.url}\n`;
      }
    }
  }

  const prompt = `You are an expert web developer. Create a COMPLETE, WORKING single HTML file.

BRIEF: ${brief}

VALIDATION CHECKS (your code MUST pass these):
${checks.map((c, i) => `${i + 1}. ${c}`).join('\n')}
${attachmentDetails}

CRITICAL REQUIREMENTS:
- Create ONE complete HTML file with ALL code inline
- Include CSS in <style> tags in <head>
- Include JavaScript in <script> tags before </body>
- For CSV data: parse it correctly, handle the sales column
- For Bootstrap: load from jsdelivr CDN
- Make EVERY check pass exactly as specified
- Use proper selectors (e.g., #total-sales, #product-sales)
- Handle edge cases and data parsing carefully
- If attachments have CSV/JSON data, parse and use them correctly

Output ONLY the complete HTML code. No markdown, no explanations.`;

  const message = await anthropic.messages.create({
    model: 'claude-sonnet-4-20250514',
    max_tokens: 4096,
    messages: [{
      role: 'user',
      content: prompt
    }]
  });

  let code = message.content[0].text;
  
  // Clean up markdown if present
  code = code.replace(/```html\n?/g, '').replace(/```\n?/g, '').trim();
  
  return code;
}

async function createGitHubRepo(repoName) {
  try {
    const response = await axios.post(
      'https://api.github.com/user/repos',
      {
        name: repoName,
        description: 'Auto-generated by LLM deployment system',
        private: false,
        auto_init: false
      },
      {
        headers: {
          'Authorization': `token ${GITHUB_TOKEN}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      }
    );
    return response.data;
  } catch (error) {
    if (error.response?.status === 422) {
      console.log(`Repo ${repoName} already exists, using existing repo`);
      return { name: repoName };
    }
    throw error;
  }
}

async function pushFileToGitHub(repoName, filePath, content, message) {
  const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/contents/${filePath}`;
  
  await axios.put(
    url,
    {
      message: message,
      content: Buffer.from(content).toString('base64')
    },
    {
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    }
  );
}

async function enableGitHubPages(repoName) {
  try {
    await axios.post(
      `https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/pages`,
      {
        source: {
          branch: 'main',
          path: '/'
        }
      },
      {
        headers: {
          'Authorization': `token ${GITHUB_TOKEN}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      }
    );
  } catch (error) {
    if (error.response?.status === 409) {
      console.log('GitHub Pages already enabled');
    } else {
      throw error;
    }
  }
}

async function getLatestCommitSHA(repoName) {
  const response = await axios.get(
    `https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/commits/main`,
    {
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    }
  );
  return response.data.sha;
}

async function updateFileOnGitHub(repoName, filePath, content, message) {
  const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/contents/${filePath}`;
  
  const currentFile = await axios.get(url, {
    headers: {
      'Authorization': `token ${GITHUB_TOKEN}`,
      'Accept': 'application/vnd.github.v3+json'
    }
  });
  
  await axios.put(
    url,
    {
      message: message,
      content: Buffer.from(content).toString('base64'),
      sha: currentFile.data.sha
    },
    {
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    }
  );
}

async function notifyEvaluationURL(evaluationUrl, payload) {
  const maxRetries = 5;
  const retryDelays = [1000, 2000, 4000, 8000, 16000];
  
  for (let i = 0; i < maxRetries; i++) {
    try {
      const response = await axios.post(evaluationUrl, payload, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      });
      
      if (response.status === 200) {
        console.log('Successfully notified evaluation URL');
        return { success: true, response: response.data };
      }
    } catch (error) {
      console.error(`Notification attempt ${i + 1} failed:`, error.message);
      
      if (i < maxRetries - 1) {
        await delay(retryDelays[i]);
      } else {
        throw error;
      }
    }
  }
}

function generateREADME(brief, repoName) {
  return `# ${repoName}

## Summary
${brief}

## Live Demo
Visit: https://${GITHUB_USERNAME}.github.io/${repoName}/

## Auto-generated
This project was created by an LLM-powered deployment system.
`;
}

const MIT_LICENSE = `MIT License

Copyright (c) 2025

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.`;

module.exports = async (req, res) => {
  // Allow GET for testing
  if (req.method === 'GET') {
    return res.status(200).json({ 
      success: true, 
      message: "LLM Deployment API is running",
      endpoint: "/api/build",
      method: "POST",
      timestamp: new Date().toISOString()
    });
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed. Use POST.' });
  }

  try {
    const { email, secret, task, round, nonce, brief, checks, evaluation_url, attachments = [] } = req.body;

    if (secret !== SECRET_CODE) {
      return res.status(401).json({ error: 'Invalid secret code' });
    }

    if (!email || !task || !round || !nonce || !brief || !evaluation_url) {
      return res.status(400).json({ 
        error: 'Missing required fields',
        required: ['email', 'task', 'round', 'nonce', 'brief', 'evaluation_url']
      });
    }

    // Send immediate response
    res.status(200).json({ 
      success: true, 
      message: 'Task received and processing started',
      task: task,
      round: round,
      nonce: nonce
    });

    // Process asynchronously
    (async () => {
      try {
        const repoName = task.toLowerCase().replace(/[^a-z0-9-]/g, '-');
        
        console.log(`Starting ${round === 1 ? 'Round 1' : 'Round 2'} for task: ${task}`);
        
        if (round === 1) {
          // Generate code with attachments
          const htmlCode = await generateCode(brief, checks, attachments);
          
          // Create repo
          await createGitHubRepo(repoName);
          await delay(2000);
          
          // Push files
          await pushFileToGitHub(repoName, 'LICENSE', MIT_LICENSE, 'Add MIT License');
          await delay(1000);
          
          const readme = generateREADME(brief, repoName);
          await pushFileToGitHub(repoName, 'README.md', readme, 'Add README');
          await delay(1000);
          
          await pushFileToGitHub(repoName, 'index.html', htmlCode, 'Add main application');
          await delay(2000);
          
          // Enable Pages
          await enableGitHubPages(repoName);
          await delay(5000);
          
          // Get commit SHA
          const commitSha = await getLatestCommitSHA(repoName);
          
          // Notify evaluation
          const payload = {
            email: email,
            task: task,
            round: round,
            nonce: nonce,
            repo_url: `https://github.com/${GITHUB_USERNAME}/${repoName}`,
            commit_sha: commitSha,
            pages_url: `https://${GITHUB_USERNAME}.github.io/${repoName}/`
          };
          
          await notifyEvaluationURL(evaluation_url, payload);
          console.log(`Round 1 completed for ${task}`);
          
        } else if (round === 2) {
          // Generate updated code
          const htmlCode = await generateCode(brief, checks, attachments);
          
          // Update files
          await updateFileOnGitHub(repoName, 'index.html', htmlCode, `Round 2: Update application`);
          await delay(1000);
          
          const readme = generateREADME(brief, repoName);
          await updateFileOnGitHub(repoName, 'README.md', readme, 'Update README for Round 2');
          await delay(5000);
          
          // Get commit SHA
          const commitSha = await getLatestCommitSHA(repoName);
          
          // Notify evaluation
          const payload = {
            email: email,
            task: task,
            round: round,
            nonce: nonce,
            repo_url: `https://github.com/${GITHUB_USERNAME}/${repoName}`,
            commit_sha: commitSha,
            pages_url: `https://${GITHUB_USERNAME}.github.io/${repoName}/`
          };
          
          await notifyEvaluationURL(evaluation_url, payload);
          console.log(`Round 2 completed for ${task}`);
        }
        
      } catch (asyncError) {
        console.error('Async processing error:', asyncError);
        console.error('Error details:', asyncError.response?.data || asyncError.message);
      }
    })();

  } catch (error) {
    console.error('Request handling error:', error);
    // Don't send response here as we already sent 200
  }
};
